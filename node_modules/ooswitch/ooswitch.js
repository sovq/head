module.exports = function(name,gpioPort,eventEmitter,switchPath){

	this.ee = eventEmitter;
	this.switchPath = switchPath;
	this.gpioNumber = gpioPort;
	this.name = name;
	this.enabled;	
	var Nedb = require('nedb')
	this.lightswithlog = new Nedb({ filename: '/home/pi/greenhouse/ligthswitchlog.db', autoload: true });
		
	
	this.isEnabled = function(){
		this.execSwitch("status");
	};
	
	this.on = function(){			
		this.execSwitch("on");
	};
	this.off = function(){
		this.execSwitch("off");
	};
	
	this.connectionEventHandler=function(ooSwitch,ConnectionEventArgs){
		var socket = ConnectionEventArgs.ioSocket;
		this.execSwitch("status","connection status",[socket]);
	};
	
	this.switchEventHandler=function(ooSwitch,ConnectionEventArgs,socket){
		var toggle = ConnectionEventArgs.lightState;
		this.execSwitch(toggle,"switch by web",[socket]);
	};
	
	
	this.logdb=function(toggle, source){
		now = new Date();
		dateFormat = require('dateformat')
		this.lightswithlog.insert({ date: dateFormat(now, "yyyy-mm-dd, HH:MM:ss"), toggle: toggle, origin: source }, function (err) { });
	}

	

	this.execSwitch=function(toggle,source,sockets){
		console.log("socket");
		console.log("execSwitch source "+source)
		var my_command = this.switchPath+" "+this.gpioNumber+" "+toggle;
		console.log("komenda: ",my_command);
		var process = require('child_process');
		var self = this;
		var ls = process.exec(
					my_command,
					function(error, stdout, stderr){
						console.log("process source " + source)
						self.exec_cb(self, error, stdout, stderr, source, sockets);
					});
		ls.on('exit', function(code){ 
			console.log(self.name+' switch exit code: '+ code);
		});
	};
	
	this.exec_cb=function(ooSwitch, error, stdout, stderr, source, sockets){
		if (error) {
			 console.log(error.stack);
			 console.log('Error code: '+error.code);
			 console.log('Signal received: '+error.signal);
		}else{
		
			var lightState = stdout.trim()
			console.log("exec_cb source "+source)
			ooSwitch.logdb(lightState, source);
			if(!(sockets.length==0)){
				for(i=0;i<sockets.length;i++){
					var socket = sockets[i];
					socket.emit(ooSwitch.name, {lightState:lightState});
				}
			}else{
				console.log("nie ma socketu");
			}
			console.log('lightSwitch status:'+lightState)
			console.log('stdout: ' + stdout);
			console.log('stderr: ' + stderr);
			
		};
	};
}
