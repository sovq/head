
var dateFormat = require('dateformat')
function buildDate(HHMM){
	var hours = HHMM.substring(0, HHMM.indexOf(":"));
	var minuts = HHMM.substring(HHMM.indexOf(":")+1,HHMM.length);
	var now = new Date()
	now.setMinutes(minuts);
	now.setHours(hours);
	return(now)
}

function getMillisecoundsFromNow(HHMM){
	var now = new Date();
	var argDate = buildDate(HHMM);
	console.log("       now: "+now);
	console.log("sched date: "+argDate)
	return argDate - now;
}

function getSunDataFromDB(isoDateTime,sunset,callback){
	var lightingList = [];
	

	sunset.find({date: isoDateTime}, function (err, docs) {
		for(var i=0;i<docs.length;i++){
			var row = docs[i];
			var sunLight = {'date': row.date, 'sunrise': row.sunrise, 'sunset': row.sunset }
			lightingList.push(sunLight);
		}
		callback(lightingList)		
	});
}



function getDateInDBFormat(date){

	today = new Date(date);
	today = dateFormat(today,'yyyy-mm-dd')
	returnDate = new Date(today)
	returnDate.setHours(00)
	returnDate = dateFormat(returnDate,"isoDateTime");
	return returnDate;
}

module.exports.buildDate = buildDate
module.exports.getMillisecoundsFromNow = getMillisecoundsFromNow;
module.exports.getSunDataFromDB = getSunDataFromDB;
module.exports.getDateInDBFormat = getDateInDBFormat;

function scheduler(lightSwitch,EventEmitter, configdb, sunsetdb) {
	this.switchOffTime = '21:00';
	this.lightSwitch = lightSwitch;
	this.interval = null;
	this.timeOutSwitchOn = null;
	this.timeOutSwitchOff = null;
	this.ee = EventEmitter;
	this.sockets = [];
	this.config = configdb;
	this.sunsetdb = sunsetdb;
	this.status=null
	this.isEnabled = function(){ 
		if(this.interval==null){
				return false;
		}else{
				return true;
		}
	}
	

	this.disable = function(){
		if(!(this.timeOutSwitchOn==null)){
			console.log("timeOutSwitchOn jest ustawiony i wyjebuje");
			clearTimeout(this.timeOutSwitchOn);
			this.timeOutSwitchOn = null;
		}else{
			console.log("timeOutSwitchOn nie jest ustawiony")
		}
		if(!(this.timeOutSwitchOff==null)){
			console.log("timeOutSwitchOff jest ustawiony i wyjebuje");
			clearTimeout(this.timeOutSwitchOff);
			this.timeOutSwitchOff=null;
		}else{
			console.log("timeOutSwitchOff nie jest ustawiony")
		}
		if(!(this.interval==null)){
			console.log("interval jest ustawiony i wyjebuje")
			clearInterval(this.interval);
			this.interval=null;
		}else{
			console.log("interval nie jest ustawiony")
		}
	}
	this.addSocket=function(socket){
		this.sockets.push(socket);
	}
	
	
	this.removeSocket=function(socket){
		var index = this.sockets.indexOf(socket);
		this.socket.splice(index,1);
		
	}
	
	this.disconnectEventHandler=function(scheduler,DisconnectEventArgs){
			var socket = DisconnectEventArgs.socket;
			this.removeSocket(socket);
	}
	
	this.connectionEventHandler=function(scheduler,ConnectionEventArgs){
		
		var socket = ConnectionEventArgs.ioSocket;
		this.addSocket(socket)
		console.log("connectionEventHandler")
		socket.emit('SchedulerStatus',{'schedulerState':scheduler.status});
	}
	this.switchEventHandler=function(scheduler,data,socket){
		var toggle = data.schedulerState;
		var db = scheduler.config;
		if(toggle == 'on'){
			scheduler.enable();
			scheduler.saveConfigDB(db,'on');			
		}else if (toggle == 'off'){
			scheduler.disable();
			scheduler.saveConfigDB(db,'off');
		}
		if(!(socket==null)){
			socket.emit('SchedulerStatus',{'schedulerState':toggle});
		}
	}
	
	this.checkStatus = function(){	
		var self = this;
		this.checkConfigDB(this,function(data){
			self.enableCallBack(self,data)
		});
		
	}
	
	this.enable = function(){
		console.log("this.enable()")
		var self = this;
		this.interval = setInterval(function(){self.setTimeouts()},86400000)
		this.setTimeouts();
					
	};
	
	this.enableCallBack=function(scheduler,data){
		var toggle = 'off';
		if(!(data.length == 0)){
			if(data[0].state == 'on'){
				var toggle = 'on';
				scheduler.enable();
			}
			
		}
		scheduler.status=toggle;
		console.log("schedulerState: "+toggle)
		scheduler.ee.emit('SchedulerStatus',{'schedulerState':toggle});
	}
	
	this.setTimeouts = function(){	
		this.getSundata();
		var self = this;
		this.ee.on('sundatareceived',function(data){
			var time = data.time;
			var scheduler = data.scheduler;
			delaySwitchOn = getMillisecoundsFromNow(time);
			delaySwitchOff = getMillisecoundsFromNow('21:00');
			//after 21:00
			if(delaySwitchOn < 0 && delaySwitchOff < 0){
				console.log("jest po 21")
				scheduler.lightSwitch.execSwitch('off','scheduler',scheduler.sockets)
				scheduler.setSwitchOnTime(delaySwitchOn+86400000);
				scheduler.setSwitchOffTime(delaySwitchOff+86400000);
			// between start and 21:00
			}else if (delaySwitchOn < 0 && delaySwitchOff > 0){
				console.log("jest po starcie, ale przed 21")
				scheduler.lightSwitch.execSwitch('on','scheduler',scheduler.sockets)
				scheduler.setSwitchOffTime(delaySwitchOff)
			//before start
			}else if(delaySwitchOn > 0 && delaySwitchOff > 0){		
				console.log("jest przed startem")		
				scheduler.lightSwitch.execSwitch('off','scheduler',scheduler.sockets)
				scheduler.setSwitchOnTime(delaySwitchOn);
				scheduler.setSwitchOffTime(delaySwitchOff);				
			}
		});
		
	}
	
	this.getSundata=function(){
		var today = new Date();
		var todayDB = getDateInDBFormat(today);
		var self = this;
		getSunDataFromDB(todayDB,self.sunsetdb,function(data){self.getSundataCallBack(self,data)})
	}
	
	this.getSundataCallBack=function(scheduler,data){
		var time = data[0].sunset;
		scheduler.ee.emit('sundatareceived',{'time':time,'scheduler':scheduler})
	}

	this.setSwitchOffTime = function(delaySwitchOff){
		if(!this.timeOutSwitchOff==null){
			clearTimeout(this.timeOutSwitchOff);
		}
		var self = this;
		
		this.timeOutSwitchOff = setTimeout(function(){self.lightSwitch.execSwitch('off','scheduler',self.sockets)},delaySwitchOff)
		console.log("ligth will switch off in: "+delaySwitchOff)
	}	
	this.setSwitchOnTime  = function(delaySwitchOn){
		if(!this.timeOutSwitchOn==null){
			clearTimeout(this.timeOutSwitchOn);
		}
		console.log(delaySwitchOn)
		var self=this;
		this.timeOutSwitchOn = setTimeout(function(){
			console.log("odpalam timeout" + self.lightSwitch)
			self.lightSwitch.execSwitch('on','scheduler',self.sockets)
		},delaySwitchOn)
		console.log("ligth will switch on in: "+delaySwitchOn)
	}	
	
	this.checkConfigDB = function(scheduler,callback){
		scheduler.config.find({item: 'scheduler'}, function (err, docs) {
			console.log(docs.length);
			var state =[];
			for(var i=0;i<docs.length;i++){
				var row = docs[i];
				var data = {'item': row.item, 'state': row.state }
				state.push(data);
			}
			callback(state)		
		});
	}
	this.saveConfigDB = function(db,toggle){	    
		db.find({item: 'scheduler'}, function (err, docs) {
			var state = 'on';
			var id = null;
			for(var i=0;i<docs.length;i++){
				var row = docs[i];
				var state = row.state;
				var id = row._id
			}
				console.log("_id: "+id);
				console.log("save config: "+toggle)
				if(!(id==null)){
					console.log("saving for a given id")
					db.update({'item': 'scheduler'},{$set:{'state':toggle}},{}, function (err, numReplaced) {});
				}else{
					db.insert({'item': 'scheduler', 'state': toggle }, function (err) {});
				}
		});
	}
}

module.exports.scheduler = scheduler;
