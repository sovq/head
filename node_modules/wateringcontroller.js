var util = require("util");
var events = require("events");

var TWO_HOURS_MILISECONDS = 7200000;
var FIVE_SECONDS = 5000;

function WateringController(config){
	this.configdb = config.configdb;
	this.switchlogdb = config.switchlog;
	this.name = config.name;
	this.velve = config.ssrSwitch;
	this.borderValue = 1;
	this.wateringDuration = 0;
	this.minimumDelayAfterWatering = TWO_HOURS_MILISECONDS;
	this.openVelve = function(){
		var self = this;
		console.log(this.name+" actual watering")
		this.velve.execSwitch("on",this.name);
		setTimeout(self.emit(self.name,'refresh'),500);
		var close = setTimeout(function(){			
			self.velve.execSwitch("off",self.name)
			setTimeout(self.emit(self.name,'refresh'),500);
		},this.wateringDuration)
	}


	this.watering = function(date){
		var self = this;
		this.switchlogdb.find({ssr:self.velve.name}).sort({date:-1}).limit(1).exec(function(err,docs){
			console.log("docs "+docs.length)
			if(docs.length!=0){
				var dbdate = new Date(docs[0].date)
				dbDateWithDelay = (Number(dbdate.valueOf())+Number(self.minimumDelayAfterWatering))
				now = date.valueOf();
				if(now>dbDateWithDelay){
					console.log(self.name+": have NOT been waterd")
					self.openVelve();
				}else{
					console.log(self.name+": have been watered")
				}
			}else{
				console.log(this.name+": first watering")
				self.openVelve();
			}
				
		});	
		
	}
	
	this.sensorEventHandler = function(data){
		console.log(this.name+" sensor data received")
		if(data>this.borderValue){
			console.log(this.name+" border value condition met")
			var now = new Date();
			this.watering(now);
		}
	}	

	this.getFromConfigDb = function(query){
		var column = query.column;
		var adjust = query.adjust;
		var res = query.res;
		
		var self = this;
		db=this.configdb;
		db.find({'item': 'watercontroller'},function(err,docs){
			for(var i=0;i<docs.length;i++){
				row = docs[i];
				self.borderValue = row.dryness;
				self.wateringDuration = row.duration;
			}	
			
			if(!(docs.length==0)){
				if(column=='dryness'){
					self.borderValue  += adjust;
					
					self.borderValue  = Math.max(0,self.borderValue )
					self.borderValue  = Math.min(1,self.borderValue )
					self.borderValue = Math.round(self.borderValue*100)/100	
				}else if(column=='duration'){
					console.log("Adjustment"+adjust)
					console.log("after adjustment"+self.wateringDuration )
					self.wateringDuration += adjust;
					self.wateringDuration = Math.max(0,self.wateringDuration)	
				}
				db.update({'item': 'watercontroller'},{$set:{'dryness':self.borderValue,'duration':self.wateringDuration}},{}, 
				function (err, numReplaced) {
					self.getFromConfigDb_cb(res);
				});
			}else{
				db.insert({'item':'watercontroller','dryness':self.borderValue,'duration':self.wateringDuration},
				function (err) {
					self.getFromConfigDb_cb(res);
				});
			}
		
		});
	}
	
	this.getFromConfigDb_cb=function(res){
		res.end(JSON.stringify({'dryness':this.borderValue,'duration':this.wateringDuration}));
	}
	
	
	this.enableSsrSwitch=function(){
		this.ssrSwitch('on',this.name);	
	}
	
	this.disableSsrSwitch=function(){
		this.ssrSwitch('off',this.name);
	}
	
	this.enableForDuration=function(duration){
		this.enableSsrSwitch
		
	}


	this.requestGetDrynessLevel=function(res){
		var params = {res:res,
					  column:'dryness',
					  adjust:0}
		this.getFromConfigDb(params);
	}
	this.requestGetWateringDuration=function(res){
		var params = {res :res,
					  column:'duration',
					  adjust:0}
		this.getFromConfigDb(params);
	}	
	this.requestSetDrynessLevelPlus=function(res){
		var params = {res:res,
					  column:'dryness',
					  adjust:0.05}
		this.getFromConfigDb(params);
	}
	this.requestSetDrynessLevelMinus=function(res){
		var params = {res:res,
					  column:'dryness',
					  adjust:-0.05}
		this.getFromConfigDb(params);
	}
	this.requestSetWateringDurationPlus=function(res){
		var params = {res:res,
					  column:'duration',
					  adjust:FIVE_SECONDS}
		this.getFromConfigDb(params);
	}
	this.requestSetWateringDurationMinus=function(res){
		var params = {res:res,
					  column:'duration',
					  adjust:-FIVE_SECONDS}
		this.getFromConfigDb(params);
	}
}
util.inherits(WateringController, events.EventEmitter);

module.exports = WateringController;
