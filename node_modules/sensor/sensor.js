var util = require("util");
var events = require("events");

function Sensor(config,db,interval){
	events.EventEmitter.call(this);
	
	this.name = config.name;	
	this.execPath = config.buildExecString(config);
	this.intervalDuration = interval;
	this.db = db;
	
	this.enable=function(){
		var slef = this;
		this.interval = setInterval(function(){slef.measure()},slef.intervalDuration);	
	}
	
	this.measure=function(){
		var process = require('child_process');
		var self = this;
		var ls = process.exec(
					this.execPath,
					function(error, stdout, stderr){
						self.measure_cb(self, error, stdout, stderr);
					});
		ls.on('exit', function(code){ 
			console.log(self.name+' switch exit code: '+ code);
		});
	};
	
	this.measure_cb=function(sensor, error, stdout, stderr){
		if (error) {
			 console.log(error.stack);
			 console.log('Error code: '+error.code);
			 console.log('Signal received: '+error.signal);
		}else{
			var dateFormat = require('dateformat');
			var measurement = stdout.trim();
			var now = Date();
			sensor.emit(sensor.name,measurement)

			sensor.db.insert({ date: dateFormat(now, "yyyy-mm-dd, HH:MM:ss"), value: measurement, sensor: sensor.name }, function (err) { });
			sensor.db.insert({ date: dateFormat(now, "yyyy-mm-dd, HH:MM:ss"), value: measurement, sensor: sensor.name }, function (err) { });
			console.log(sensor.name+' measurement: ' + stdout);
			
		};
	};
	
	this.enable();

}
util.inherits(Sensor, events.EventEmitter);
module.exports = Sensor;
