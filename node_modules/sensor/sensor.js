
module.exports = function(sensorPath,temperatureDB){
	this.sensorPath = sensorPath;
	this.intervalDuration = 30000;
	this.sockets = [];
	this.temperaturedb = temperatureDB;

	
	
	this.addSocket = function(socket){
		this.sockets.push(socket);
	}
	this.removeSocket = function(socket){
		var index = this.sockets.indexOf(socket);
		this.sockets.splice(index,1);
	}
	

	this.enable=function(){
		var slef = this;
		this.interval = setInterval(function(){slef.measure()},slef.intervalDuration);	
	}
	
	this.measure=function(){
		var my_command = this.sensorPath;
		console.log("execSwitch: "+my_command);
		var process = require('child_process');
		var self = this;
		var ls = process.exec(
					my_command,
					function(error, stdout, stderr){
						self.measure_cb(self, error, stdout, stderr);
					});
		ls.on('exit', function(code){ 
			console.log(self.name+' switch exit code: '+ code);
		});
	};
	
	this.measure_cb=function(sensor, error, stdout, stderr){
		if (error) {
			 console.log(error.stack);
			 console.log('Error code: '+error.code);
			 console.log('Signal received: '+error.signal);
		}else{
			var dateFormat = require('dateformat');
			var temp = stdout.trim();
			var now = Date();
			
	
			for(var i=0; i<sensor.sockets.length; i++){
				sockets[i].emit(sensor.name, {temperature:temp});
			}
			sensor.temperaturedb.insert({ date: dateFormat(now, "yyyy-mm-dd, HH:MM:ss"), temperature: temp, sensor: 'air' }, function (err) { });
			console.log('Termometer measurement: ' + stdout);
			
		};
	};
};
